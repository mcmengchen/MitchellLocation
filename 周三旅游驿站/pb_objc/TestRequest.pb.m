// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TestRequest.pb.h"

@implementation TestRequestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TestRequestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MoTestInfo ()
@property (retain) NSString* iosVersion;
@property (retain) NSString* iphoneVewsion;
@property (retain) NSString* longitude;
@property (retain) NSString* latitude;
@property (retain) NSString* date;
@end

@implementation MoTestInfo

- (BOOL) hasIosVersion {
  return !!hasIosVersion_;
}
- (void) setHasIosVersion:(BOOL) value {
  hasIosVersion_ = !!value;
}
@synthesize iosVersion;
- (BOOL) hasIphoneVewsion {
  return !!hasIphoneVewsion_;
}
- (void) setHasIphoneVewsion:(BOOL) value {
  hasIphoneVewsion_ = !!value;
}
@synthesize iphoneVewsion;
- (BOOL) hasLongitude {
  return !!hasLongitude_;
}
- (void) setHasLongitude:(BOOL) value {
  hasLongitude_ = !!value;
}
@synthesize longitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) value {
  hasLatitude_ = !!value;
}
@synthesize latitude;
- (BOOL) hasDate {
  return !!hasDate_;
}
- (void) setHasDate:(BOOL) value {
  hasDate_ = !!value;
}
@synthesize date;
- (void) dealloc {
  self.iosVersion = nil;
  self.iphoneVewsion = nil;
  self.longitude = nil;
  self.latitude = nil;
  self.date = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.iosVersion = @"";
    self.iphoneVewsion = @"";
    self.longitude = @"";
    self.latitude = @"";
    self.date = @"";
  }
  return self;
}
static MoTestInfo* defaultMoTestInfoInstance = nil;
+ (void) initialize {
  if (self == [MoTestInfo class]) {
    defaultMoTestInfoInstance = [[MoTestInfo alloc] init];
  }
}
+ (MoTestInfo*) defaultInstance {
  return defaultMoTestInfoInstance;
}
- (MoTestInfo*) defaultInstance {
  return defaultMoTestInfoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIosVersion) {
    [output writeString:1 value:self.iosVersion];
  }
  if (self.hasIphoneVewsion) {
    [output writeString:2 value:self.iphoneVewsion];
  }
  if (self.hasLongitude) {
    [output writeString:3 value:self.longitude];
  }
  if (self.hasLatitude) {
    [output writeString:4 value:self.latitude];
  }
  if (self.hasDate) {
    [output writeString:5 value:self.date];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasIosVersion) {
    size += computeStringSize(1, self.iosVersion);
  }
  if (self.hasIphoneVewsion) {
    size += computeStringSize(2, self.iphoneVewsion);
  }
  if (self.hasLongitude) {
    size += computeStringSize(3, self.longitude);
  }
  if (self.hasLatitude) {
    size += computeStringSize(4, self.latitude);
  }
  if (self.hasDate) {
    size += computeStringSize(5, self.date);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MoTestInfo*) parseFromData:(NSData*) data {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromData:data] build];
}
+ (MoTestInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MoTestInfo*) parseFromInputStream:(NSInputStream*) input {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromInputStream:input] build];
}
+ (MoTestInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoTestInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromCodedInputStream:input] build];
}
+ (MoTestInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MoTestInfo*)[[[MoTestInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MoTestInfo_Builder*) builder {
  return [[[MoTestInfo_Builder alloc] init] autorelease];
}
+ (MoTestInfo_Builder*) builderWithPrototype:(MoTestInfo*) prototype {
  return [[MoTestInfo builder] mergeFrom:prototype];
}
- (MoTestInfo_Builder*) builder {
  return [MoTestInfo builder];
}
@end

@interface MoTestInfo_Builder()
@property (retain) MoTestInfo* result;
@end

@implementation MoTestInfo_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MoTestInfo alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MoTestInfo_Builder*) clear {
  self.result = [[[MoTestInfo alloc] init] autorelease];
  return self;
}
- (MoTestInfo_Builder*) clone {
  return [MoTestInfo builderWithPrototype:result];
}
- (MoTestInfo*) defaultInstance {
  return [MoTestInfo defaultInstance];
}
- (MoTestInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MoTestInfo*) buildPartial {
  MoTestInfo* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MoTestInfo_Builder*) mergeFrom:(MoTestInfo*) other {
  if (other == [MoTestInfo defaultInstance]) {
    return self;
  }
  if (other.hasIosVersion) {
    [self setIosVersion:other.iosVersion];
  }
  if (other.hasIphoneVewsion) {
    [self setIphoneVewsion:other.iphoneVewsion];
  }
  if (other.hasLongitude) {
    [self setLongitude:other.longitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasDate) {
    [self setDate:other.date];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MoTestInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MoTestInfo_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIosVersion:[input readString]];
        break;
      }
      case 18: {
        [self setIphoneVewsion:[input readString]];
        break;
      }
      case 26: {
        [self setLongitude:[input readString]];
        break;
      }
      case 34: {
        [self setLatitude:[input readString]];
        break;
      }
      case 42: {
        [self setDate:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIosVersion {
  return result.hasIosVersion;
}
- (NSString*) iosVersion {
  return result.iosVersion;
}
- (MoTestInfo_Builder*) setIosVersion:(NSString*) value {
  result.hasIosVersion = YES;
  result.iosVersion = value;
  return self;
}
- (MoTestInfo_Builder*) clearIosVersion {
  result.hasIosVersion = NO;
  result.iosVersion = @"";
  return self;
}
- (BOOL) hasIphoneVewsion {
  return result.hasIphoneVewsion;
}
- (NSString*) iphoneVewsion {
  return result.iphoneVewsion;
}
- (MoTestInfo_Builder*) setIphoneVewsion:(NSString*) value {
  result.hasIphoneVewsion = YES;
  result.iphoneVewsion = value;
  return self;
}
- (MoTestInfo_Builder*) clearIphoneVewsion {
  result.hasIphoneVewsion = NO;
  result.iphoneVewsion = @"";
  return self;
}
- (BOOL) hasLongitude {
  return result.hasLongitude;
}
- (NSString*) longitude {
  return result.longitude;
}
- (MoTestInfo_Builder*) setLongitude:(NSString*) value {
  result.hasLongitude = YES;
  result.longitude = value;
  return self;
}
- (MoTestInfo_Builder*) clearLongitude {
  result.hasLongitude = NO;
  result.longitude = @"";
  return self;
}
- (BOOL) hasLatitude {
  return result.hasLatitude;
}
- (NSString*) latitude {
  return result.latitude;
}
- (MoTestInfo_Builder*) setLatitude:(NSString*) value {
  result.hasLatitude = YES;
  result.latitude = value;
  return self;
}
- (MoTestInfo_Builder*) clearLatitude {
  result.hasLatitude = NO;
  result.latitude = @"";
  return self;
}
- (BOOL) hasDate {
  return result.hasDate;
}
- (NSString*) date {
  return result.date;
}
- (MoTestInfo_Builder*) setDate:(NSString*) value {
  result.hasDate = YES;
  result.date = value;
  return self;
}
- (MoTestInfo_Builder*) clearDate {
  result.hasDate = NO;
  result.date = @"";
  return self;
}
@end

@interface TestRequest ()
@property (retain) NSMutableArray* mutableListMoTestInfoList;
@property (retain) NSString* username;
@end

@implementation TestRequest

@synthesize mutableListMoTestInfoList;
- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (void) dealloc {
  self.mutableListMoTestInfoList = nil;
  self.username = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
  }
  return self;
}
static TestRequest* defaultTestRequestInstance = nil;
+ (void) initialize {
  if (self == [TestRequest class]) {
    defaultTestRequestInstance = [[TestRequest alloc] init];
  }
}
+ (TestRequest*) defaultInstance {
  return defaultTestRequestInstance;
}
- (TestRequest*) defaultInstance {
  return defaultTestRequestInstance;
}
- (NSArray*) listMoTestInfoList {
  return mutableListMoTestInfoList;
}
- (MoTestInfo*) listMoTestInfoAtIndex:(int32_t) index {
  id value = [mutableListMoTestInfoList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (MoTestInfo* element in self.listMoTestInfoList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasUsername) {
    [output writeString:2 value:self.username];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (MoTestInfo* element in self.listMoTestInfoList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasUsername) {
    size += computeStringSize(2, self.username);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TestRequest*) parseFromData:(NSData*) data {
  return (TestRequest*)[[[TestRequest builder] mergeFromData:data] build];
}
+ (TestRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequest*)[[[TestRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRequest*) parseFromInputStream:(NSInputStream*) input {
  return (TestRequest*)[[[TestRequest builder] mergeFromInputStream:input] build];
}
+ (TestRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequest*)[[[TestRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRequest*)[[[TestRequest builder] mergeFromCodedInputStream:input] build];
}
+ (TestRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRequest*)[[[TestRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRequest_Builder*) builder {
  return [[[TestRequest_Builder alloc] init] autorelease];
}
+ (TestRequest_Builder*) builderWithPrototype:(TestRequest*) prototype {
  return [[TestRequest builder] mergeFrom:prototype];
}
- (TestRequest_Builder*) builder {
  return [TestRequest builder];
}
@end

@interface TestRequest_Builder()
@property (retain) TestRequest* result;
@end

@implementation TestRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TestRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestRequest_Builder*) clear {
  self.result = [[[TestRequest alloc] init] autorelease];
  return self;
}
- (TestRequest_Builder*) clone {
  return [TestRequest builderWithPrototype:result];
}
- (TestRequest*) defaultInstance {
  return [TestRequest defaultInstance];
}
- (TestRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRequest*) buildPartial {
  TestRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TestRequest_Builder*) mergeFrom:(TestRequest*) other {
  if (other == [TestRequest defaultInstance]) {
    return self;
  }
  if (other.mutableListMoTestInfoList.count > 0) {
    if (result.mutableListMoTestInfoList == nil) {
      result.mutableListMoTestInfoList = [NSMutableArray array];
    }
    [result.mutableListMoTestInfoList addObjectsFromArray:other.mutableListMoTestInfoList];
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MoTestInfo_Builder* subBuilder = [MoTestInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addListMoTestInfo:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setUsername:[input readString]];
        break;
      }
    }
  }
}
- (NSArray*) listMoTestInfoList {
  if (result.mutableListMoTestInfoList == nil) { return [NSArray array]; }
  return result.mutableListMoTestInfoList;
}
- (MoTestInfo*) listMoTestInfoAtIndex:(int32_t) index {
  return [result listMoTestInfoAtIndex:index];
}
- (TestRequest_Builder*) replaceListMoTestInfoAtIndex:(int32_t) index with:(MoTestInfo*) value {
  [result.mutableListMoTestInfoList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (TestRequest_Builder*) addAllListMoTestInfo:(NSArray*) values {
  if (result.mutableListMoTestInfoList == nil) {
    result.mutableListMoTestInfoList = [NSMutableArray array];
  }
  [result.mutableListMoTestInfoList addObjectsFromArray:values];
  return self;
}
- (TestRequest_Builder*) clearListMoTestInfoList {
  result.mutableListMoTestInfoList = nil;
  return self;
}
- (TestRequest_Builder*) addListMoTestInfo:(MoTestInfo*) value {
  if (result.mutableListMoTestInfoList == nil) {
    result.mutableListMoTestInfoList = [NSMutableArray array];
  }
  [result.mutableListMoTestInfoList addObject:value];
  return self;
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (TestRequest_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (TestRequest_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
@end

